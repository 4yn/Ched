using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading.Tasks;

using ConcurrentPriorityQueue;
using Ched.Components.Notes;

namespace Ched.Components.Exporter
{
    public class SusExporter : IExporter<SusArgs>
    {
        public string FormatName
        {
            get { return "Seaurchin Score File(sus形式)"; }
        }

        public void Export(string path, ScoreBook book, SusArgs args)
        {
            var notes = book.Score.Notes;
            using (var writer = new StreamWriter(path))
            {
                writer.WriteLine("This file was generated by Ched {0}.", System.Reflection.Assembly.GetEntryAssembly().GetName().Version.ToString());

                writer.WriteLine("#TITLE \"{0}\"", book.Title);
                writer.WriteLine("#ARTIST \"{0}\"", book.ArtistName);
                writer.WriteLine("#DESIGNER \"{0}\"", book.NotesDesignerName);
                writer.WriteLine("#DIFFICULTY {0}", (int)args.PlayDifficulty + (string.IsNullOrEmpty(args.ExtendedDifficulty) ? "" : ":" + args.ExtendedDifficulty));
                writer.WriteLine("#PLAYLEVEL {0}", args.PlayLevel);
                writer.WriteLine("#SONGID \"{0}\"", args.SongId);
                writer.WriteLine("#WAVE \"{0}\"", args.SoundFileName);
                writer.WriteLine("#WAVEOFFSET {0}", args.SoundOffset);
                writer.WriteLine("#JACKET \"{0}\"", args.JacketFilePath);

                writer.WriteLine();

                int barTick = book.Score.TicksPerBeat * 4;
                for (int i = 0; i < book.Score.Events.BPMChangeEvents.Count; i++)
                {
                    var ev = book.Score.Events.BPMChangeEvents[i];
                    writer.WriteLine("#BPM{0:00}:{1}", i + 1, ev.BPM);
                    writer.WriteLine("#{0:000}08:{1:00}", ev.Tick / barTick, i + 1);
                }

                writer.WriteLine();

                var shortNotes = notes.Taps.Cast<TappableBase>().Select(p => new { Type = '1', Note = p })
                    .Concat(notes.ExTaps.Cast<TappableBase>().Select(p => new { Type = '2', Note = p }))
                    .Concat(notes.Flicks.Cast<TappableBase>().Select(p => new { Type = '3', Note = p }))
                    .Concat(notes.Damages.Cast<TappableBase>().Select(p => new { Type = '4', Note = p }))
                    .Select(p => new
                    {
                        BarIndex = p.Note.Tick / barTick + 1,
                        TickOffset = p.Note.Tick % barTick,
                        LaneIndex = p.Note.LaneIndex,
                        Width = p.Note.Width,
                        Type = p.Type
                    });

                foreach (var notesInBar in shortNotes.GroupBy(p => p.BarIndex))
                {
                    foreach (var notesInLane in notesInBar.GroupBy(p => p.LaneIndex))
                    {
                        int gcd = notesInLane.Select(p => p.TickOffset).Aggregate(barTick, (p, q) => GetGcd(p, q));
                        var dic = notesInLane.ToDictionary(p => p.TickOffset, p => p);
                        writer.Write("#{0:000}1{1}:", notesInBar.Key, notesInLane.Key.ToString("x"));
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            writer.Write(dic.ContainsKey(tickOffset) ? dic[tickOffset].Type + ToLaneWidthString(dic[tickOffset].Width) : "00");
                        }
                        writer.WriteLine();
                    }
                }

                var airs = notes.Airs.Select(p =>
                {
                    string type = "";
                    switch (p.HorizontalDirection)
                    {
                        case HorizontalAirDirection.Center:
                            type = p.VerticalDirection == VerticalAirDirection.Up ? "1" : "2";
                            break;

                        case HorizontalAirDirection.Left:
                            type = p.VerticalDirection == VerticalAirDirection.Up ? "3" : "5";
                            break;

                        case HorizontalAirDirection.Right:
                            type = p.VerticalDirection == VerticalAirDirection.Up ? "4" : "6";
                            break;
                    }

                    return new
                    {
                        BarIndex = p.Tick / barTick + 1,
                        TickOffset = p.Tick % barTick,
                        LaneIndex = p.LaneIndex,
                        Type = type,
                        Width = p.Width
                    };
                });

                foreach (var airsInBar in airs.GroupBy(p => p.BarIndex))
                {
                    foreach (var airsInLane in airsInBar.GroupBy(p => p.LaneIndex))
                    {
                        int gcd = airsInLane.Select(p => p.TickOffset).Aggregate(barTick, (p, q) => GetGcd(p, q));
                        var dic = airsInLane.ToDictionary(p => p.TickOffset, p => p);
                        writer.Write("#{0:000}5{1}:", airsInBar.Key, airsInLane.Key.ToString("x"));
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            writer.Write(dic.ContainsKey(tickOffset) ? dic[tickOffset].Type + ToLaneWidthString(dic[tickOffset].Width) : "00");
                        }
                        writer.WriteLine();
                    }
                }

                var identifier = new IdentifierAllocationManager();

                var holds = book.Score.Notes.Holds
                    .OrderBy(p => p.StartTick)
                    .Select(p => new
                    {
                        Identifier = identifier.Allocate(p.StartTick, p.Duration),
                        StartTick = p.StartTick,
                        EndTick = p.StartTick + p.Duration,
                        Width = p.Width,
                        LaneIndex = p.LaneIndex
                    });

                foreach (var hold in holds)
                {
                    if (hold.StartTick / barTick == hold.EndTick / barTick)
                    {
                        writer.Write("#{0:000}2{1}{2}:", hold.StartTick / barTick + 1, hold.LaneIndex.ToString("x"), hold.Identifier);
                        int gcd = GetGcd(GetGcd(hold.StartTick % barTick, (hold.EndTick) % barTick), barTick);
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            if (hold.StartTick % barTick == tickOffset) writer.Write("1" + ToLaneWidthString(hold.Width));
                            else if (hold.EndTick % barTick == tickOffset) writer.Write("2" + ToLaneWidthString(hold.Width));
                            else writer.Write("00");
                        }
                        writer.WriteLine();
                    }
                    else
                    {
                        writer.Write("#{0:000}2{1}{2}:", hold.StartTick / barTick + 1, hold.LaneIndex.ToString("x"), hold.Identifier);
                        int gcd = GetGcd(hold.StartTick % barTick, barTick);
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            if (hold.StartTick % barTick == tickOffset) writer.Write("1" + ToLaneWidthString(hold.Width));
                            else writer.Write("00");
                        }
                        writer.WriteLine();
                        writer.Write("#{0:000}2{1}{2}:", hold.EndTick / barTick + 1, hold.LaneIndex.ToString("x"), hold.Identifier);
                        gcd = GetGcd(hold.EndTick % barTick, barTick);
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            if (hold.EndTick % barTick == tickOffset) writer.Write("2" + ToLaneWidthString(hold.Width));
                            else writer.Write("00");
                        }
                        writer.WriteLine();
                    }
                }

                identifier.Clear();

                var slides = notes.Slides
                    .OrderBy(p => p.StartTick)
                    .Select(p => new
                    {
                        Identifier = identifier.Allocate(p.StartTick, p.GetDuration()),
                        Note = p
                    });

                foreach (var slide in slides)
                {
                    var start = new[] { new
                    {
                        TickOffset = 0,
                        LaneIndex = slide.Note.StartLaneIndex,
                        Type = "1"
                    } };
                    var steps = slide.Note.StepNotes.OrderBy(p => p.TickOffset).Select(p => new
                    {
                        TickOffset = p.TickOffset,
                        LaneIndex = p.LaneIndex,
                        Type = p.IsVisible ? "3" : "5"
                    }).Take(slide.Note.StepNotes.Count - 1);
                    var endNote = slide.Note.StepNotes.OrderBy(p => p.TickOffset).Last();
                    var end = new[] { new
                    {
                        TickOffset = endNote.TickOffset,
                        LaneIndex = endNote.LaneIndex,
                        Type = "2"
                    } };
                    var slideNotes = start.Concat(steps).Concat(end);
                    foreach (var notesInBar in slideNotes.GroupBy(p => (slide.Note.StartTick + p.TickOffset) / barTick + 1))
                    {
                        foreach (var notesInLane in notesInBar.GroupBy(p => p.LaneIndex))
                        {
                            int gcd = notesInLane.Select(p => (slide.Note.StartTick + p.TickOffset) % barTick).Aggregate(barTick, (p, q) => GetGcd(p, q));
                            var dic = notesInLane.ToDictionary(p => (slide.Note.StartTick + p.TickOffset) % barTick, p => p);
                            writer.Write("#{0:000}3{1}{2}:", notesInBar.Key, notesInLane.Key.ToString("x"), slide.Identifier);
                            for (int i = 0; i * gcd < barTick; i++)
                            {
                                int tickOffset = i * gcd;
                                writer.Write(dic.ContainsKey(tickOffset) ? dic[tickOffset].Type + ToLaneWidthString(slide.Note.Width) : "00");
                            }
                            writer.WriteLine();
                        }
                    }
                }

                identifier.Clear();

                var airActions = notes.AirActions
                    .OrderBy(p => p.StartTick)
                    .Select(p => new
                    {
                        Identifier = identifier.Allocate(p.StartTick, p.GetDuration()),
                        Note = p
                    });

                foreach (var airAction in airActions)
                {
                    var start = new[] { new
                    {
                        TickOffset = 0,
                        Type = "1"
                    } };
                    var actions = airAction.Note.ActionNotes.OrderBy(p => p.Offset).Select(p => new
                    {
                        TickOffset = p.Offset,
                        Type = "3"
                    }).Take(airAction.Note.ActionNotes.Count - 1);
                    var endNote = airAction.Note.ActionNotes.OrderBy(p => p.Offset).Last();
                    var end = new[] { new
                    {
                        TickOffset = endNote.Offset,
                        Type = "2"
                    } };
                    var actionNotes = start.Concat(actions).Concat(end);
                    foreach (var airActionsInBar in actionNotes.GroupBy(p => (airAction.Note.StartTick + p.TickOffset) / barTick + 1))
                    {
                        writer.Write("#{0:000}4{1}{2}:", airActionsInBar.Key, airAction.Note.ParentNote.LaneIndex.ToString("x"), airAction.Identifier);
                        int gcd = airActionsInBar.Select(p => (airAction.Note.StartTick + p.TickOffset) % barTick).Aggregate(barTick, (p, q) => GetGcd(p, q));
                        var dic = airActionsInBar.ToDictionary(p => (airAction.Note.StartTick + p.TickOffset) % barTick, p => p);
                        for (int i = 0; i * gcd < barTick; i++)
                        {
                            int tickOffset = i * gcd;
                            if (dic.ContainsKey(tickOffset)) writer.Write("{0}{1}", dic[tickOffset].Type, airAction.Note.ParentNote.Width);
                            else writer.Write("00");
                        }
                        writer.WriteLine();
                    }
                }
            }
        }

        public static int GetGcd(int a, int b)
        {
            if (a < b) return GetGcd(b, a);
            if (b == 0) return a;
            return GetGcd(b, a % b);
        }

        public static string ToLaneWidthString(int width)
        {
            return width == 16 ? "g" : width.ToString("x");
        }

        public class IdentifierAllocationManager
        {
            private int lastStartTick;
            private Stack<char> IdentifierStack;
            private ConcurrentPriorityQueue<Tuple<int, char>, int> UsedIdentifiers;

            public IdentifierAllocationManager()
            {
                Clear();
            }

            public void Clear()
            {
                lastStartTick = 0;
                IdentifierStack = new Stack<char>(Enumerable.Range(0, 26).Select(p => (char)('A' + p)).Reverse());
                UsedIdentifiers = new ConcurrentPriorityQueue<Tuple<int, char>, int>();
            }

            public char Allocate(int startTick, int duration)
            {
                if (startTick < lastStartTick) throw new InvalidOperationException("startTick must not be less than last called value.");
                while (UsedIdentifiers.Count > 0 && UsedIdentifiers.Peek().Item1 < startTick)
                {
                    IdentifierStack.Push(UsedIdentifiers.Dequeue().Item2);
                }
                char c = IdentifierStack.Pop();
                int endTick = startTick + duration;
                UsedIdentifiers.Enqueue(Tuple.Create(endTick, c), -endTick);
                lastStartTick = startTick;
                return c;
            }
        }
    }

    public class SusArgs
    {
        public string PlayLevel { get; set; }

        public Difficulty PlayDifficulty { get; set; }

        public string ExtendedDifficulty { get; set; }

        public string SongId { get; set; }

        public string SoundFileName { get; set; }

        public decimal SoundOffset { get; set; }

        public string JacketFilePath { get; set; }

        public enum Difficulty
        {
            Basic,
            Advanced,
            Expert,
            Master,
            WorldsEnd
        }
    }
}
